/* graph-balance-laplacian-solver-js -v1.0.0 - 2016-04-20 */
!function(a,b){"use strict";var c=function(a){return new c.init(a)},d=function(a){var b=new Array(a||0),c=a;if(arguments.length>1)for(var e=Array.prototype.slice.call(arguments,1);c--;)b[c]=d.apply(this,e);return b};c.prototype={validate:function(){if(!Array.isArray(this.c))throw"error: needed an array!";if(this.c[0].length<2||this.c.length!==this.c[0].length)throw"error: needed a matrix of size NxN, N>1!";for(var a=0;a<this.c.length;a++)if(0!==this.c[a][a])throw"error: all the intersects should be zeros!"},nodeConnect:function(a){for(var b=0,c=0;c<this.c.length;c++)b+=this.c[c][a];return b},laplacian:function(){for(var a=this.c.length,b=d(a,a),c=0;a>c;c++)for(var e=0;a>e;e++)c==e?b[c][e]=b[c][e]||0+this.nodeConnect(e):b[c][e]=b[c][e]||0-this.c[c][e];return b},laplacPotDet:function(a){var c=(this.c.length,this.laplacian());c.splice(a,1);for(var d=0;d<c.length;d++)c[d].splice(a,1);var e=b.matrix(c);return b.det(e)},laplacPot:function(a){for(var c=this.c.length,d=this.laplacian(),e=0;c>e;e++)0===e?d[0][e]=1:d[0][e]=0;var f=b.inv(d),g=b.det(f);return f[a][0]/g},allLaplacPot:function(){for(var a=[],b=0;b<this.c.length;b++)a.push(this.laplacPot(b));return a},flow:function(a){return this.nodeConnect(a)*this.laplacPot(a)},allFlows:function(){for(var a=[],b=0;b<this.c.length;b++)a.push(this.flow(b));return a}},c.init=function(a){var b=this;b.c=a,b.validate()},c.init.prototype=c.prototype,a.GBLSolvr=a.GS$=c}(window,math);